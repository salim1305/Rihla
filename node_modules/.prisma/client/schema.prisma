// prisma/schema.prisma

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native"] // <-- force l'utilisation du binaire classique
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  name      String?
  avatar    String? // URL de la photo de profil
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  hostProfile  HostProfile?
  reservations Reservation[]
  reviews      Review[]
  experiences  Experience[]
}

model HostProfile {
  id       Int       @id @default(autoincrement())
  userId   Int       @unique
  bio      String?
  location String?
  listings Listing[]

  user User @relation(fields: [userId], references: [id])
}

model Listing {
  id          Int      @id @default(autoincrement())
  hostId      Int
  title       String
  description String
  price       Float
  location    String
  createdAt   DateTime @default(now())

  host         HostProfile   @relation(fields: [hostId], references: [id])
  reservations Reservation[]
  reviews      Review[]
  experiences  Experience[]
}

model Reservation {
  id        Int      @id @default(autoincrement())
  userId    Int
  listingId Int
  startDate DateTime
  endDate   DateTime
  createdAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id])
  listing Listing @relation(fields: [listingId], references: [id])
}

model Review {
  id        Int      @id @default(autoincrement())
  userId    Int
  listingId Int
  rating    Int
  comment   String?
  createdAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id])
  listing Listing @relation(fields: [listingId], references: [id])
}

enum Role {
  USER
  HOST
  ADMIN
}

model Experience {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  image       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      Int
  user        User     @relation(fields: [userId], references: [id])
  listingId   Int?
  listing     Listing? @relation(fields: [listingId], references: [id])
}
